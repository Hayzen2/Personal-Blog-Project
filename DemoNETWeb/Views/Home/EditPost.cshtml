@model DemoNETWeb.Models.Post
@{
    Layout = "../Shared/_Layout.cshtml";
    ViewBag.Title = "EditPost";
}

<a href="/" class="btn btn-primary fs-4"> <i class="bi bi-house"></i> Back to Homepage</a>
<form method="post" action="/Home/Delete/@Model.Id" style="display: inline;">
    <button type="submit" class="btn btn-danger fs-4" onclick="return confirm('Are you sure you want to delete this post?');">
        <i class="bi bi-trash3"></i> Delete
    </button>
</form>

<div style="display: flex; justify-content: center;">
    <form method="post" action="/Home/Edit/@Model.Id" enctype="multipart/form-data" style="width: 100%; max-width: 1500px; font-size: 30px;">
        @Html.AntiForgeryToken()

        <div style="margin-bottom: 20px;">
            <label for="title" style="display:block;font-weight:bold;">Title</label>
            <input type="text" name="title" id="title" class="w-100 fs-3" value="@Model.Title" required />
        </div>

        <div id="ContentContainer">
            @for (int i = 0; i < Model.ContentSections.Count; i++)
            {
                var section = Model.ContentSections[i];
                <div class="content-section card p-3 mb-3 position-relative">
                    <button type="button" class="btn btn-outline-danger fs-3 fw-bold position-absolute top-0 end-0 m-2"
                            onclick="deleteSection(this)">
                        Delete Section
                    </button>

                    <input type="hidden" name="sectionIds[@i]" value="@(section.Id)">

                    <div class="mb-3">
                        <label style="display:block; font-weight:bold; margin-top: 20px;">Content</label>
                        <textarea name="newContent[@i]" class="form-control fs-3">@(section.Text)</textarea>
                    </div>

                    <div class="mb-3">
                        @if (!string.IsNullOrEmpty(section.FileUrl))
                        {
                            <input type="hidden" name="deleteFiles[@i]" value="false"
                                   id="deleteFlag-@i">
                            <div class="original-preview">
                                @if (section.FileType.StartsWith("image/"))
                                {
                                    <img src="@(section.FileUrl)" class="img-preview" data-original="@(section.FileUrl)" style="max-width: 75%; height: auto;" />
                                    <button type="button" class="btn btn-danger ms-2"
                                            onclick="deleteFile(this, @i)">
                                        Delete Image
                                    </button>
                                }
                                else
                                {
                                    <div class="file-preview-content d-flex align-items-center">
                                        <i class="bi bi-file-earmark-text fs-3 me-2"></i>
                                        <small>@(section.FileType)</small>
                                    </div>
                                    <a href="@(section.FileUrl)" target="_blank" class="btn btn-secondary">View File</a>
                                    <button type="button" class="btn btn-danger ms-2"
                                            onclick="deleteFile(this, @i)">
                                        Delete File
                                    </button>
                                }
                            </div>
                        }
                        <div class="new-preview" style="display: none;"></div>
                    </div>
                    <input type="file" name="uploadedFiles[@i]" class="form-control fs-3 file-input" onchange="previewFile(this)" data-original="@(section.FileUrl)" />
                    <div class="file-change-cancel mt-2">
                        <button type="button" class="btn btn-outline-danger fs-3"
                                onclick="clearFileInput(this)"
                                style="display: none;">
                            Cancel Change
                        </button>
                    </div>
                    <div class="add-new-section mt-2">
                        <!-- Add New Section Button -->
                        <button type="button" class="btn btn-outline-primary fs-4" onclick="addNewSection()">
                            Add New Section
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-success my-3 w-100 fs-3">Save Changes</button>
            <a href="@Url.Action("ViewPost", new { id = Model.Id })" class="btn btn-danger my-3 w-100 fs-3">
                Cancel
            </a>
        </div>
    </form>
</div>

<script>
    function previewFile(input) {
        // Find closest parent section container
        const container = input.closest('.content-section');

        // Get preview elements from the container
        const preview = container.querySelector('.new-preview'); // Where new preview will show
        const originalPreview = container.querySelector('.original-preview'); // Original file preview
        const cancelBtn = container.querySelector('.file-change-cancel button'); 

        // Check if a file was selected
        if (input.files && input.files[0]) {
            // Create file reader to read file content
            const reader = new FileReader();

            // When file loads, update preview
            reader.onload = function (e) {
                if (input.files[0].type.startsWith('image/')) {
                    preview.innerHTML = `<img src="${e.target.result}" class="img-preview" style="max-width: 50%; height: auto;" />`;
                }
                else {
                    preview.innerHTML = `
                        <div class="file-preview-content">
                                <i class="bi bi-file-earmark-text fs-1"></i>
                                <div class="file-info">
                                    <div>${input.files[0].name}</div>
                                    <small>${input.files[0].type}</small>
                                </div>
                            </div>
                    `;
                }

                if (preview) preview.style.display = 'block'; // Show new preview
                if (originalPreview) originalPreview.style.display = 'none'; // Hide original
                if (cancelBtn) cancelBtn.style.display = 'block'; 
            }

            // Start reading the file (triggers onload when done)
            reader.readAsDataURL(input.files[0]);
        }
    }

    function deleteFile(button, index) {
        const container = button.closest('.content-section');
        const deleteFlag = document.getElementById(`deleteFlag-${index}`);
        const originalPreview = container.querySelector('.original-preview');
        if (deleteFlag) deleteFlag.value = "true";
        if (originalPreview) originalPreview.remove();
    }

    function clearFileInput(button) {
        const container = button.closest('.content-section');
        const input = container.querySelector('.file-input'); // File input
        const preview = container.querySelector('.new-preview'); // Preview div
        const originalPreview = container.querySelector('.original-preview'); // Original file

        input.value = ''; // Clear selected file

        // Clear and hide new preview
        if (preview) {
            preview.innerHTML = ''; // Remove preview content
            preview.style.display = 'none'; // Hide preview area
        }

        // Show original file again
        if (originalPreview) originalPreview.style.display = 'block';

        cancelBtn.style.display = 'none';
    }

    function deleteSection(button) {
        const sectionDiv = button.closest('.content-section');

        // Remove section from DOM
        sectionDiv.remove();
        reindexSections();
    }

    // Function to update form field index after changes
    function reindexSections() {
        document.querySelectorAll('.content-section').forEach((section, index) => {
            section.querySelectorAll('[name]').forEach(element => {
                const baseName = element.name.split('[')[0];
                element.name = `${baseName}[${index}]`;
            });
        });
    }

    function addNewSection() {
        const container = document.getElementById('ContentContainer');
        const index = document.querySelectorAll('.content-section').length;
        const sectionHtml = `
        <div class="content-section card p-3 mb-3 position-relative">
            <button type="button" class="btn btn-outline-danger fs-3 fw-bold position-absolute top-0 end-0 m-2"
                    onclick="deleteSection(this)">
                Delete Section
            </button>

            <input type="hidden" name="sectionIds[${index}]" value="-1">

            <div class="mb-3">
                <label style="display:block; font-weight:bold; margin-top: 20px;">Content</label>
                <textarea name="newContent[${index}]" class="form-control fs-3"></textarea>
            </div>

            <div class="mb-3">
                <input type="file" name="uploadedFiles[${index}]"
                       class="form-control fs-3 file-input"
                       onchange="previewFile(this)" />
                <div class="new-preview" style="display: none;"></div>
            </div>
        </div>`;

        // Add new section to end of container
        container.insertAdjacentHTML('beforeend', sectionHtml);

        // Update form field indexes
        reindexSections();
    }
</script>